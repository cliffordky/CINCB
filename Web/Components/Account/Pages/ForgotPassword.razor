@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Identity
@using Web.Components.EmailTemplates
@using Core

@inject UserManager<ApplicationUser> UserManager
@inject IEmailService EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HtmlRenderer TemplateBuilder

<PageTitle>Forgot your password?</PageTitle>

<div class="card border-0 rounded-4">
    <div class="card-body p-3 p-md-4 p-xl-5">
        <div class="row">
            <div class="col-12">
                <div class="mb-4">
                    <h3>Forgot your password?</h3>
                    <p>Enter your email address to recieve your password reset link</p>
                </div>
            </div>
        </div>
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset password</button>
        </EditForm>
        <div class="row">
            <div class="col-12">
                <div class="d-flex gap-2 gap-md-4 flex-column flex-md-row justify-content-md-end mt-4">
                    <a href="Account/Login">Back to Login</a>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        var html = await TemplateBuilder.Dispatcher.InvokeAsync(async () =>
                       {
                           var dictionary = new Dictionary<string, object?>
                                               {
                    { "Context", new PasswordReset.PasswordResetModel()
                    {
                     FirstName = user.FirstName,
                     ResetLink = callbackUrl
                    } }
                                               };

                           var parameters = ParameterView.FromDictionary(dictionary);
                           var output = await TemplateBuilder.RenderComponentAsync<PasswordReset>(parameters);

                           return output.ToHtmlString();
                       });


        await EmailSender.SendEmailAsync(user.Email, "Reset your password", html);

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
